@page "/standings"
@inject HttpClient Http

<h3>Standings</h3>

<div>
    <label for="leagueSelect">Select League:</label>
    <select id="leagueSelect" @bind="@selectedLeagueId">
        @if (leagues == null)
        {
            <option value="0">Loading</option>
        }
        else
        {
            @foreach (var league in leagues)
            {
                <option value="@league.LeagueId">@league.Name</option>
            }
        }
    </select>
</div>

<div>
    <label for="seasonSelect">Select Season:</label>
    <select id="seasonSelect" @bind="@selectedSeasonId">
        @if (seasons == null)
        {
            <option value="0">Loading</option>
        }
        else
        {
            @foreach (var season in seasons)
            {
                <option value="@season.SeasonId">@season.Name</option>
            }
        }
    </select>
</div>

<button class="btn btn-primary" @onclick="LoadStandings">Generate report</button>

@if (standings != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Team</th>
                <th>Wins</th>
                <th>Losses</th>
                <th>Draws</th>
                <th>Points</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var teamStanding in standings.TeamStandings)
            {
                <tr>
                    <td>@teamStanding.TeamName</td>
                    <td>@teamStanding.Wins</td>
                    <td>@teamStanding.Losses</td>
                    <td>@teamStanding.Draws</td>
                    <td>@teamStanding.Points</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<LeagueDTO>? leagues;  // Implement method to fetch leagues
    private List<SeasonDto>? seasons;  // Implement method to fetch seasons
    private StandingsDTO? standings;  // Implement method to fetch standings

    private int selectedLeagueId;
    private int selectedSeasonId;

    protected override async Task OnInitializedAsync()
    {
        // Fetch leagues and seasons on page initialization
        leagues = await FetchLeagues();
        seasons = await FetchSeasons();
    }

    private async void LoadStandings()
    {
        standings = await Http.GetFromJsonAsync<StandingsDTO>($"https://localhost:7213/api/games/standingsRaport/{selectedLeagueId}/{selectedSeasonId}");
    }

    private async Task<List<LeagueDTO>?> FetchLeagues()
    {
        return await Http.GetFromJsonAsync<List<LeagueDTO>>("https://localhost:7213/api/leagues");
    }

    private async Task<List<SeasonDto>?> FetchSeasons()
    {
        // Implement logic to fetch seasons from your data source
        // Return the list of seasons
        return await Http.GetFromJsonAsync<List<SeasonDto>>("https://localhost:7213/api/seasons");
    }

    private StandingsDTO GenerateStandingsDTO(int leagueId, int seasonId)
    {
        // Implement logic to generate the StandingsDTO based on the selected league and season
        // Return the generated StandingsDTO
        return new StandingsDTO();
    }
}