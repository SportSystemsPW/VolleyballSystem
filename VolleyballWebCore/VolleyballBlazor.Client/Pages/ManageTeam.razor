@page "/ManageTeam"
@attribute [Authorize]
@inject IUserService userService
@inject ITeamService teamService
@inject NavigationManager navigationManager
@using System.Text

@if (PageReady)
{
    <h3>Zarządzanie drużyną</h3>

    <h2>@Team.Name</h2>

    <EditForm Model="ManagedTeam" OnValidSubmit="OnSubmit">
        <DataAnnotationsValidator />

        <GenericForm Model="ManagedTeam" EditorClass="form-control">
            <FieldTemplate Context="field">
                <div class="form-group">
                    <label for="@field.EditorId">@field.DisplayName</label>
                    @field.EditorTemplate
                    <p class="text-danger">@field.FieldValidationTemplate</p>
                </div>
            </FieldTemplate>


        </GenericForm>
        <h5>Zawodnicy</h5>
        <small class="text-info">Możesz edytować adres email niezarejestrowanych graczy. Jeśli założą konto na podany email, to automatycznie ich konto stanie się członkiem drużyny.</small>
        <p class="text-danger"><ValidationMessage For="@(() => ManagedTeam.Players)"></ValidationMessage></p>
        <table class="table table-responsive table-sm">
            <thead>
                <tr>
                    <th>Lp</th>
                    <th>Imię</th>
                    <th>Nazwisko</th>
                    <th>Numer</th>
                    <th>Wzrost</th>
                    <th>Pozycja</th>
                    <th>Płeć</th>
                    <th>Email</th>
                    <th>Usuń</th>
                </tr>
            </thead>
            @{
                i = 0;
            }

            <tr>
                <td>@(++i) (K)</td>
                <td>
                    <InputText style="max-width:110px" @bind-Value="ManagedTeam.Captain.FirstName" disabled />
                </td>
                <td><InputText style="max-width:110px" @bind-Value="ManagedTeam.Captain.LastName" disabled /></td>
                <td><InputNumber style="max-width:60px" @bind-Value="ManagedTeam.Captain.JerseyNumber" /></td>
                <td><InputNumber style="max-width:60px" @bind-Value="ManagedTeam.Captain.Height" /></td>
                <td>
                    <InputSelect @bind-Value="ManagedTeam.Captain.PositionId">
                        @foreach (var position in Positions)
                        {
                            <option value="@position.Id">@position.Name</option>
                        }
                    </InputSelect>
                </td>
                <td class="d-flex flex-nowrap align-items-center">
                    <InputRadioGroup @bind-Value="ManagedTeam.Captain.Gender">
                        <InputRadio Value="false" class="m-1"></InputRadio>
                        <label class="mt-1">M</label>
                        <InputRadio Value="true" class="m-1"></InputRadio>
                        <label class="mt-1">K</label>
                    </InputRadioGroup>
                </td>
                @if (ManagedTeam.NewPlayers.Count > 0)
                {
                    <td></td>
                }
                <td>
                </td>
            </tr>

            @foreach (var player in ManagedTeam.Players)
            {
                <tr>
                    <td>@(++i)</td>
                    <td>
                        <InputText style="max-width:110px" @bind-Value="player.FirstName" disabled />
                        <p class="text-danger"><ValidationMessage For="@(() => player.FirstName)" /></p>
                    </td>
                    <td><InputText style="max-width:110px" @bind-Value="player.LastName" disabled /></td>
                    <td><InputNumber style="max-width:60px" @bind-Value="player.JerseyNumber" /></td>
                    <td><InputNumber style="max-width:60px" @bind-Value="player.Height" /></td>
                    <td>
                        <InputSelect @bind-Value="player.PositionId">
                            @foreach (var position in Positions)
                            {
                                <option value="@position.Id">@position.Name</option>
                            }
                        </InputSelect>
                    </td>
                    <td class="d-flex flex-nowrap align-items-center">
                        <InputRadioGroup @bind-Value="player.Gender">
                            <InputRadio Value="false" class="m-1"></InputRadio>
                            <label class="mt-1">M</label>
                            <InputRadio Value="true" class="m-1"></InputRadio>
                            <label class="mt-1">K</label>
                        </InputRadioGroup>
                    </td>
                    <td>
                        @if (!player.IsRegisteredUser)
                        {
                            <InputText style="max-width:110px" @bind-Value="player.Email" />
                        }
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger" @onclick="() => RemovePlayer(player)"><b>-</b></button>
                    </td>
                </tr>
            }


            @if (ManagedTeam.NewPlayers.Count > 0)
            {
                <tr>
                    <td colspan="8"><h6>Nowi zawodnicy</h6></td>
                </tr>
            }
            @foreach (var player in ManagedTeam.NewPlayers)
            {
                <tr>
                    <td>@(++i)</td>
                    <td>
                        <InputText style="max-width:110px" @bind-Value="player.FirstName" />
                        <p class="text-danger"><ValidationMessage For="@(() => player.FirstName)" /></p>
                    </td>
                    <td><InputText style="max-width:120px" @bind-Value="player.LastName" /></td>
                    <td><InputNumber style="max-width:60px" @bind-Value="player.JerseyNumber" /></td>
                    <td><InputNumber style="max-width:60px" @bind-Value="player.Height" /></td>
                    <td>
                        <InputSelect @bind-Value="player.PositionId">
                            @foreach (var position in Positions)
                            {
                                <option value="@position.Id">@position.Name</option>
                            }
                        </InputSelect>
                    </td>
                    <td class="d-flex flex-nowrap align-items-center">
                        <InputRadioGroup @bind-Value="player.Gender">
                            <InputRadio Value="false" class="m-1"></InputRadio>
                            <label class="m-1">M </label>
                            <InputRadio Value="true" class="m-1"></InputRadio>
                            <label class="m-1">K </label>
                        </InputRadioGroup>
                    </td>
                    <td>
                        <InputText style="max-width:120px" @bind-Value="player.Email" />
                        <p class="text-danger"><ValidationMessage For="@(() => player.Email)" /></p>
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger" @onclick="() => UndoAdd(player)"><b>-</b></button>
                    </td>
                </tr>
            }


            @if (ManagedTeam.RemovedPlayers.Count > 0)
            {
                <tr>
                    <td colspan="8"><h6>Usuwani zawodnicy</h6></td>
                </tr>
            }
            @foreach (var player in ManagedTeam.RemovedPlayers)
            {
                <tr>
                    <td>@(++i)</td>
                    <td>
                        <InputText style="max-width:110px" @bind-Value="player.FirstName" disabled />
                        <p class="text-danger"><ValidationMessage For="@(() => player.FirstName)" /></p>
                    </td>
                    <td><InputText style="max-width:120px" @bind-Value="player.LastName" disabled /></td>
                    <td><InputNumber style="max-width:60px" @bind-Value="player.JerseyNumber" disabled /></td>
                    <td><InputNumber style="max-width:60px" @bind-Value="player.Height" disabled /></td>
                    <td>
                        <InputSelect @bind-Value="player.PositionId" disabled>
                            @foreach (var position in Positions)
                            {
                                <option value="@position.Id">@position.Name</option>
                            }
                        </InputSelect>
                    </td>
                    <td class="d-flex flex-nowrap align-items-center">
                        <InputRadioGroup @bind-Value="player.Gender">
                            <InputRadio disabled Value="false" class="m-1"></InputRadio>
                            <label class="m-1">M </label>
                            <InputRadio disabled Value="true" class="m-1"></InputRadio>
                            <label class="m-1">K </label>
                        </InputRadioGroup>
                    </td>
                    <td></td>

                    <td>
                        <button type="button" class="btn btn-danger" @onclick="() => UndoRemove(player)"><b>-</b></button>
                    </td>
                </tr>
            }
            <tr>
                <td>
                    <button type="button" class="btn btn-success" @onclick="AddPlayer"><b>+</b></button>
                </td>
            </tr>
        </table>

        @if (transfers > 0)
        {

            <p>Tymi operacjami wykorzystasz następującą liczbę transferów: @transfers. Posiadasz jeszcze: @Team.AvailableTransfers transferów</p>
        }
        <p class="text-danger"><ValidationSummary /></p>
        <div class="d-flex flex-column align-items-center">
            @if (IsLoading)
            {
                <LoadingIcon></LoadingIcon>
            }
            else
            {
                @if (ShowErrorMessage)
                {
                    <p class="text-danger">@ErrorMessage </p> <br />
                }

                <button class="btn btn-primary col-sm-3" type="submit">Wyślij</button>
            }

        </div>


    </EditForm>

    // update captain
    <EditForm Model="CaptainId" class="form mt-4" OnValidSubmit="UpdateCaptain">
        <div class="d-flex flex-column">
            <h4>Zmień kapitana</h4>
            <p>Obecny kapitan: @Team.Captain.FirstName @Team.Captain.LastName</p>
            <div class="form-group">
                <label for="CaptainId">Nowy kapitan:</label>
                <InputSelect @bind-Value="CaptainId">
                    @foreach (var player in ManagedTeam.Players.Where(p => p.IsRegisteredUser))
                    {
                        <option value="@player.Id">@player.FirstName @player.LastName</option>
                    }
                </InputSelect>
            </div>
            <p class="text-primary">Uwaga: Zmieniając kapitana stracisz dostęp do zarządzania drużyną. Nowy kapitan musi posiadać własne konto.</p>
            <div class="d-flex flex-column align-items-center">
                @if (IsLoadingCaptain)
                {
                    <LoadingIcon></LoadingIcon>
                }
                else
                {
                    <p class="text-danger">@ErrorMessageCaptain </p> <br />

                    <button class="btn btn-primary col-sm-3" disabled="@(CaptainId == 0)" type="submit">Aktualizuj</button>
                }
            </div>
        </div>


    </EditForm>
}
else
{
    <div class="d-flex flex-column align-items-center mt-4">
        @if (ShowErrorMessage)
        {
            <p class="text-danger">Wystąpił błąd: @ErrorMessage </p>
            <br />
        }
        else
        {
            <LoadingIcon></LoadingIcon>
        }
    </div>
}

@code {
    ManageTeamModel ManagedTeam { get; set; } = new ManageTeamModel();
    List<PositionDto> Positions { get; set; } = new List<PositionDto>();
    ManagedTeamDataDto Team = null!;
    int CaptainId { get; set; }
    int transfers = 0;

    bool IsLoadingCaptain { get; set; } = false;
    string ErrorMessageCaptain { get; set; } = "";
    int i = 0;
    bool IsLoading { get; set; } = false;
    bool ShowErrorMessage { get; set; } = false;
    string ErrorMessage { get; set; } = "";
    bool PageReady { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var userHasTeam = await userService.IsTeamCaptain();

        if (!userHasTeam.Success)
        {
            ShowErrorMessage = true;
            ErrorMessage = userHasTeam.Message;
            return;
        }

        if (!userHasTeam.Data)
        {
            navigationManager.NavigateTo("/CreateTeam");
            return;
        }


        var positionsResult = await userService.GetPositions();
        if (!positionsResult.Success)
        {
            ShowErrorMessage = true;
            ErrorMessage = positionsResult.Message;
            return;
        }
        Positions = positionsResult.Data!;

        var teamResult = await teamService.GetManagedTeam();

        if (!teamResult.Success)
        {
            ShowErrorMessage = true;
            ErrorMessage = teamResult.Message;
            return;
        }

        Team = teamResult.Data!;

        ManagedTeam = new ManageTeamModel((ManageTeamDto)Team);

        PageReady = true;
    }

    public void AddPlayer()
    {
        i = 0;
        ManagedTeam.NewPlayers.Add(new TeamPlayerDto() { Id = 0 });
        transfers++;
    }

    public void RemovePlayer(TeamPlayerDto player)
    {
        ManagedTeam.Players.Remove(player);
        ManagedTeam.RemovedPlayers.Add(player);
    }

    public void UndoAdd(TeamPlayerDto player)
    {
        ManagedTeam.NewPlayers.Remove(player);
        transfers--;
    }

    public void UndoRemove(TeamPlayerDto player)
    {
        ManagedTeam.RemovedPlayers.Remove(player);
        ManagedTeam.Players.Add(player);
    }

    public async Task OnSubmit()
    {
        IsLoading = true;
        var response = await teamService.UpdateTeam(ManagedTeam);
        IsLoading = false;
        if (response.Success)
        {
            //Console.WriteLine(ManagedTeam.Logo.Length);
            navigationManager.NavigateTo("/ManageTeam", forceLoad: true);
        }
        else
        {
            ShowErrorMessage = true;
            ErrorMessage = response.Message;
            StateHasChanged();
        }

    }

    public async Task UpdateCaptain()
    {
        IsLoadingCaptain = true;
        var response = await teamService.UpdateCaptain(CaptainId);
        IsLoadingCaptain = false;
        if (response.Success)
        {
            navigationManager.NavigateTo($"team/{Team.Id}", forceLoad: true);
        }
        else
        {
            ErrorMessageCaptain = response.Message;
            StateHasChanged();
        }
    }
}