@page "/ManageTeam"
@attribute [Authorize]
@inject IUserService userService
@inject ITeamService teamService
@inject NavigationManager navigationManager


@if (PageReady)
{
    <h3>Zarządzanie drużyną</h3>

    <h2>@Team.Name</h2>

    <EditForm Model="ManagedTeam" OnValidSubmit="OnSubmit">
        <DataAnnotationsValidator />

        <GenericForm Model="ManagedTeam" EditorClass="form-control">
            <FieldTemplate Context="field">
                <div class="form-group">
                    <label for="@field.EditorId">@field.DisplayName</label>
                    @field.EditorTemplate
                    <p class="text-danger">@field.FieldValidationTemplate</p>
                </div>
            </FieldTemplate>


        </GenericForm>

        <h5>Zawodnicy</h5>
        <p class="text-danger"><ValidationMessage For="@(() => ManagedTeam.Players)"></ValidationMessage></p>
        <table class="table table-responsive">
            <thead>
                <tr>
                    <th>Lp</th>
                    <th>Imię</th>
                    <th>Nazwisko</th>
                    <th>Numer</th>
                    <th>Wzrost</th>
                    <th>Pozycja</th>
                    <th>Płeć</th>
                    <th>Usuń</th>
                </tr>
            </thead>
            @{
                i = 0;
            }
            @foreach (var player in ManagedTeam.Players)
            {
                <tr>
                    <td>@(++i)</td>
                    <td>
                        <InputText style="max-width:130px" @bind-Value="player.FirstName" />
                        <p class="text-danger"><ValidationMessage For="@(() => player.FirstName)" /></p>
                    </td>
                    <td><InputText style="max-width:130px" @bind-Value="player.LastName" /></td>
                    <td><InputNumber style="max-width:60px" @bind-Value="player.JerseyNumber" /></td>
                    <td><InputNumber style="max-width:60px" @bind-Value="player.Height" /></td>
                    <td>
                        <InputSelect @bind-Value="player.PositionId">
                            @foreach (var position in Positions)
                            {
                                <option value="@position.Id">@position.Name</option>
                            }
                        </InputSelect>
                    </td>
                    <td class="d-flex flex-nowrap align-items-center">
                        <InputRadioGroup @bind-Value="player.Gender">
                            <InputRadio Value="false" class="m-1"></InputRadio>
                            <label class="m-1">M </label>
                            <InputRadio Value="true" class="m-1"></InputRadio>
                            <label class="m-1">K </label>
                        </InputRadioGroup>
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger" @onclick="() => ManagedTeam.Players.Remove(player)"><b>-</b></button>
                    </td>
                </tr>
            }
            <tr>
                <td>
                    <button type="button" class="btn btn-success" @onclick="AddPlayer"><b>+</b></button>
                </td>
            </tr>
        </table>
        <p class="text-danger"><ValidationSummary /></p>
        <div class="d-flex flex-column align-items-center">
            @if (IsLoading)
            {
                <LoadingIcon></LoadingIcon>
            }
            else
            {
                @if (ShowErrorMessage)
                {
                    <p class="text-danger">@ErrorMessage </p> <br />
                }

                <button class="btn btn-primary col-sm-3" type="submit">Wyślij</button>
            }

        </div>


    </EditForm>
}
else
{
    <div class="d-flex flex-column align-items-center mt-4">
        @if (ShowErrorMessage)
        {
            <p class="text-danger">Wystąpił błąd: @ErrorMessage </p>
            <br />
        }
        else
        {
            <LoadingIcon></LoadingIcon>
        }
    </div>
}

@code {
    ManageTeamModel ManagedTeam { get; set; } = new ManageTeamModel();
    List<PositionDto> Positions { get; set; }
    TeamDto? Team;


    int i = 0;
    bool IsLoading { get; set; } = false;
    bool ShowErrorMessage { get; set; } = false;
    string ErrorMessage { get; set; }
    bool PageReady { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var userHasTeam = await userService.IsTeamCaptain();

        if (!userHasTeam.Success)
        {
            ShowErrorMessage = true;
            ErrorMessage = userHasTeam.Message;
            return;
        }

        if (!userHasTeam.Data)
        {
            //navigationManager.NavigateTo("/CreateTeam");
            //return;
        }


        var positionsResult = await userService.GetPositions();
        if (!positionsResult.Success)
        {
            ShowErrorMessage = true;
            ErrorMessage = positionsResult.Message;
            return;
        }
        Positions = positionsResult.Data;

        var teamResult = await teamService.GetManagedTeam();

        if (!teamResult.Success)
        {
            ShowErrorMessage = true;
            ErrorMessage = teamResult.Message;
            return;
        }

        Team = teamResult.Data;

        AddPlayer();

        PageReady = true;
    }

    public void AddPlayer()
    {
        i = 0;
        ManagedTeam.Players.Add(new TeamPlayerDto());
    }

    public async Task OnSubmit()
    {
        //IsLoading = true;
        //var response = await teamService.CreateTeam(ManagedTeam);
        //IsLoading = false;
        //if (response.Success)
        //{
        //    navigationManager.NavigateTo("/Teams");
        //}
        //else
        //{
        //    ShowErrorMessage = true;
        //    ErrorMessage = response.Message;
        //    StateHasChanged();
        //}

    }
}