@page "/gameform"
@inject HttpClient Http

<h3>Game Form</h3>

<hr />
@if (!success)
{
    <EditForm Model="Model" OnValidSubmit="HandleValidSubmit">
        <div class="form-group">
            <label for="gameDate">Game Date:</label>
            <InputDate class="form-control" id="gameDate" @bind-Value="@Model.GameDate" />
        </div>

        <div class="form-group">
            <label for="placeId">Place:</label>
            <InputSelect class="form-control" id="placeId" @bind-Value="@Model.PlaceId">
                @if (places == null)
                {
                    <option value="null" disabled>Loading places...</option>
                }
                else
                {
                @foreach (var place in places)
                {
                    <option value="@place.PlaceId">@place.Name</option>
                }
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="team1Result">Team 1 Result:</label>
            <InputNumber class="form-control" id="team1Result" @bind-Value="@Model.Team1Result" />
        </div>

        <div class="form-group">
            <label for="team2Result">Team 2 Result:</label>
            <InputNumber class="form-control" id="team2Result" @bind-Value="@Model.Team2Result" />
        </div>

        <div class="form-group">
            <label for="team1Id">Team 1:</label>
            <InputSelect class="form-control" id="team1Id" @bind-Value="@Model.Team1Id">
                @if (teams == null)
                {
                    <option value="null" disabled>Loading teams...</option>
                }
                else
                {
                    @foreach (var team in teams)
                    {
                        <option value="@team.TeamId">@team.Name</option>
                    }
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="team2Id">Team 2:</label>
            <InputSelect class="form-control" id="team2Id" @bind-Value="@Model.Team2Id">
                @if (teams == null)
                {
                    <option value="null" disabled>Loading teams...</option>
                }
                else
                {
                    @foreach (var team in teams)
                    {
                        <option value="@team.TeamId">@team.Name</option>
                    }
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="roundId">Round:</label>
            <InputSelect class="form-control" id="roundId" @bind-Value="@Model.RoundId">
                @if (rounds == null)
                {
                    <option value="null" disabled>Loading rounds...</option>
                }
                else
                {
                    @foreach (var round in rounds)
                    {
                        <option value="@round.RoundId">@round.Name</option>
                    }
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="leagueId">League:</label>
            <InputSelect class="form-control" id="leagueId" @bind-Value="@Model.LeagueId">
                @if (leagues == null)
                {
                    <option value="null" disabled>Loading leagues...</option>
                }
                else
                {
                    @foreach (var league in leagues)
                    {
                        <option value="@league.LeagueId">@league.Name</option>
                    }
                }
            </InputSelect>
        </div>
        <p>@message</p>
        <button type="submit" class="btn btn-success">Submit</button>

    </EditForm>
}
else
{
    <p>Game added successfully!</p>
}

@code {
    public GameDTO Model = new GameDTO();
    public DbService dbService = new DbService();
    public List<TeamDTO>? teams = null;
    public List<PlaceDTO>? places = null;
    public List<RoundDTO>? rounds = null;
    public List<LeagueDTO>? leagues = null;

    public bool success = false;
    public string message = "";

    protected async override Task OnInitializedAsync()
    {
        try
        {
            teams = await Http.GetFromJsonAsync<List<TeamDTO>>($"https://localhost:7213/api/teams");
            places = await Http.GetFromJsonAsync<List<PlaceDTO>>($"https://localhost:7213/api/places");
            rounds = await Http.GetFromJsonAsync<List<RoundDTO>>($"https://localhost:7213/api/rounds");
            leagues = await Http.GetFromJsonAsync<List<LeagueDTO>>($"https://localhost:7213/api/leagues");

            Model.PlaceId = places?.First().PlaceId ?? 0;
            Model.LeagueId = leagues?.First().LeagueId ?? 0;
            Model.RoundId = rounds?.First().RoundId ?? 0;
            Model.Team1Id = teams?.First().TeamId ?? 0;
            Model.Team2Id = teams?.First().TeamId ?? 0;
        }
        catch(Exception e)
        {
            message = e.Message;
        }
    }

    public async System.Threading.Tasks.Task HandleValidSubmit()
    {
        try
        {
            var content = JsonSerializer.Serialize(Model);
            var bodyContent = new StringContent(content, Encoding.UTF8, "application/json");

            var res = await Http.PostAsync("https://localhost:7213/api/games", bodyContent);

            if (res.IsSuccessStatusCode)
            {
                success = true;
            }
            else
            {
                message = await res.Content.ReadAsStringAsync();
            };
        }
        catch (Exception e)
        {
            message = e.Message;
        }
    }
}
