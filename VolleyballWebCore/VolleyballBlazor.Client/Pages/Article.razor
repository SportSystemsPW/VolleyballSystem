@using System.Text;
@using Volleyball.DTO.Discussion;
@inject IDiscussionService discussionService

@page "/article/{Id:int}"
@page "/article/zzz"

<div class="pt-2 d-flex flex-column">
    @if (ArticleData != null)
    {
        <div class="d-flex flex-row justify-content-between">
            <div>
                <small>@ArticleData.CreationDate</small>
                <h1>@ArticleData.Title</h1>
                <hr class="w-100"/>

                <p>@ArticleContent</p>


                <small>
                    Dodano przez: <NavLink href=@{
                                       $"/user-profile/{ArticleData.Author.Id}"
                                       }> @ArticleData.Author.FirstName @ArticleData.Author.LastName</NavLink>
                </small>
                <small>@ArticleData.CreationDate</small>
            </div>
            <div class="p-2">
                <ImagePreview Image="ArticleData.Image" />
            </div>
        </div>
        <hr style="width: 100%"/>

        <div class="text-left mt-2">
            <h4>Komentarze</h4>
            @if (CommentsErrorMessage != "")
            {
                <div class="alert alert-danger" role="alert">
                    <b>Nie udało się załadować komentarzy:</b> @CommentsErrorMessage
                </div>
            }

            <Pagination Items="Comments" PageSize="5">
                <ItemTemplate>
                    <div class="flex-row d-flex mb-4">
                        <div>
                            @if (@context.Author.Photo != null)
                            {
                                <TeamLogo Logo="@context.Author.Photo" SizePx="70" />
                            }
                            else
                            {
                                <img class="img-thumbnail" style="width: 70px" src="/images/user.png">
                            }

                        </div>
                        <div class="mr-3"></div>
                        <div>
                            <small>
                                @context.CreationDate przez <NavLink href=@{
                                                                 "/user-profile/" + @context.Author.Id
                                                                 }>@context.Author.FirstName @context.Author.LastName</NavLink>
                            </small>
                            <p>@context.Content</p>
                        </div>
                    </div>
                </ItemTemplate>
            </Pagination>

            <AuthorizeView Context="authContext">
                <Authorized>
                    <div class="mb-4">
                        <EditForm Model="@commentModel" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <div class="form-group">
                                <label class="row-form-label" for="Comment">Dodaj komentarz:</label>
                                <InputTextArea class="form-control" id="Comment" @bind-Value="commentModel.Content" />
                                <ValidationMessage class="text-danger" For="@(() => commentModel.Content)" />
                            </div>
                            <p class="text-danger">@NewCommentError</p>
                            @if (SubmitLoading)
                            {
                                <LoadingIcon />
                            }
                            else
                            {
                                <button type="submit" class="btn btn-primary">Dodaj</button>
                            }
                        </EditForm>
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>
    }
    else
    {
        @if (ArticleError != "")
        {
            <div class="p-2">
                <div class="alert alert-danger">Błąd ładowania artykułu: @ArticleError</div>
            </div>
        }
    }
</div>



@code {
    [Parameter]
    public int Id { get; set; }

    public ArticleDto? ArticleData { get; set; }

    public string ArticleError { get; set; } = "";

    public List<CommentDto> Comments { get; set; } = new List<CommentDto>();

    public string CommentsErrorMessage { get; set; } = "";

    public NewCommentDto commentModel { get; set; } = new NewCommentDto();

    public string NewCommentError { get; set; } = "";

    public bool SubmitLoading { get; set; } = false;
    public MarkupString ArticleContent;


    protected override async Task OnInitializedAsync()
    {
        ArticleData = await GetArticle();
        ArticleContent = new MarkupString(ArticleData.Content);
        await DownloadComments();
        commentModel.ContentLocationId = Id;
    }

    public async Task<ArticleDto> GetArticle()
    {
        var articleResult = await discussionService.GetArticle(Id);

        if (!articleResult.Success)
        {
            ArticleError = articleResult.Message;
            return null!;
        }
        else
        {
            return articleResult.Data!;
        }

    }

    public async Task DownloadComments()
    {
        var commentsResponse = await discussionService.GetArticleComments(Id);

        if (commentsResponse.Success)
        {
            Comments = commentsResponse.Data!;
        }
        else
        {
            CommentsErrorMessage = commentsResponse.Message;
        }
    }

    private async Task HandleValidSubmit()
    {
        NewCommentError = "";
        SubmitLoading = true;
        var result = await discussionService.AddArticleComment(commentModel);
        SubmitLoading = false;
        if (result.Success)
        {
            commentModel.Content = "";
            await DownloadComments();
        }
        else
        {
            NewCommentError = result.Message;
        }
    }
}

