@page "/user-profile/0"
@page "/user-profile/{Id:int}"

@inject IUserService userService
@inject IDiscussionService discussionService


<div class="d-flex flex-row justify-content-center">

    @if (UserProfileData != null)
    {
        <div class="text-center" style="max-width: 750px">
            <div class="d-flex flex-row justify-content-center">

                <div class="p-2" style="width: 150px; height: 200px">
                    @if (UserProfileData.Photo != null)
                    {
                        <TeamLogo Logo="@UserProfileData.Photo" SizePx="150" />
                    }
                    else
                    {
                        <img src="/images/user.png">
                    }

                </div>
                <div class="mr-5"></div>
                <div class="p-2">
                    <table class="table">
                        <tbody>
                            <tr>
                                <th>Imię i nazwisko</th>
                                <td>@UserProfileData.FirstName @UserProfileData.LastName</td>
                            </tr>
                            <tr>
                                <th>Pozycja</th>
                                <td>@(UserProfileData.PositionName ?? "Nieokreślona")</td>
                            </tr>
                            <tr>
                                <th>Rok urodzenia</th>
                                <td>@UserProfileData.BirthYear</td>
                            </tr>
                            <tr>
                                <th>Miasto</th>
                                <td>@UserProfileData.City</td>
                            </tr>
                            <tr>
                                <th>Płeć</th>
                                <td>@(UserProfileData.Gender.HasValue ? (UserProfileData.Gender.Value ? "Mężczyzna" : "Kobieta") : "Nieokreślone")</td>
                            </tr>
                            <tr>
                                <th>Wzrost</th>
                                <td>@UserProfileData.Height</td>
                            </tr>
                            <tr>
                                <th>Waga</th>
                                <td>@UserProfileData.Weight</td>
                            </tr>
                            <tr>
                                <th>Numer koszulki</th>
                                <td>@UserProfileData.JerseyNumber</td>
                            </tr>
                            <tr>
                                <th>Zasięg w bloku</th>
                                <td>@UserProfileData.BlockRange cm</td>
                            </tr>
                            <tr>
                                <th>Zasięg w ataku</th>
                                <td>@UserProfileData.AttackRange cm</td>
                            </tr>
                            <tr>
                                <th>Idol siatkówki</th>
                                <td>@UserProfileData.VolleyballIdol</td>
                            </tr>
                            <tr>
                                <th>Hobby</th>
                                <td>@UserProfileData.Hobby</td>
                            </tr>

                            <tr>
                                <th>Informacje dodatkowe</th>
                                <td>@UserProfileData.PersonalInfo</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="text-left">
                <h4>Komentarze</h4>
                @if (CommentsError != "")
                {
                    <div class="alert alert-danger" role="alert">
                        <b>Nie udało się załadować komentarzy:</b> @CommentsError
                    </div>
                }

                <Pagination Items="ProfileComments" PageSize="5">
                    <ItemTemplate>
                        <div class="flex-row d-flex mb-4">
                            <div>
                                @if (@context.Author.Photo != null)
                                {
                                    <TeamLogo Logo="@context.Author.Photo" SizePx="70" />
                                }
                                else
                                {
                                    <img class="img-thumbnail" style="width: 70px" src="/images/user.png">
                                }

                            </div>
                            <div class="mr-3"></div>
                            <div>
                                <small>
                                    @context.CreationDate przez <NavLink href=@{
                                                                     "/user-profile/" + @context.Author.Id
                                                                     }>@context.Author.FirstName @context.Author.LastName</NavLink>
                                </small>
                                <p>@context.Content</p>
                            </div>
                        </div>
                    </ItemTemplate>
                </Pagination>

                <AuthorizeView Context="authContext">
                    <Authorized>
                        <div class="mb-4">
                            <EditForm Model="@commentModel" OnValidSubmit="HandleValidSubmit">
                                <DataAnnotationsValidator />
                                <div class="form-group">
                                    <label class="row-form-label" for="Comment">Dodaj komentarz:</label>
                                    <InputTextArea class="form-control" id="Comment" @bind-Value="commentModel.Content" />
                                    <ValidationMessage class="text-danger" For="@(() => commentModel.Content)" />
                                </div>
                                <p class="text-danger">@NewCommentError</p>
                                @if (SubmitLoading)
                                {
                                    <LoadingIcon />
                                }
                                else
                                {
                                    <button type="submit" class="btn btn-primary">Dodaj</button>
                                }
                            </EditForm>
                        </div>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    }
    else
    {
        @if (Error != "")
        {
            <div class="alert alert-danger" role="alert">
                @Error
            </div>
        }
        else
        {
            <LoadingIcon />
        }
    }
</div>


@code {
    [Parameter]
    public int Id { get; set; }

    public UserProfileDto? UserProfileData { get; set; }

    public List<CommentDto> ProfileComments { get; set; } = new List<CommentDto>();

    public NewCommentDto commentModel { get; set; } = null!;

    public string Error { get; set; } = "";

    public string CommentsError { get; set; } = "";

    public bool SubmitLoading { get; set; } = false;

    public string NewCommentError { get; set; } = "";

    protected override async void OnParametersSet()
    {
        UserProfileData = await GetUserProfile();
        if (UserProfileData != null)
        {
            await GetComments();
        }

        commentModel = new NewCommentDto()
            {
                ContentLocationId = Id,
            };
        StateHasChanged();
        base.OnParametersSet();
    }

    public async Task GetComments()
    {

        var commentsResult = await discussionService.GetProfileComments(Id);

        if (commentsResult.Success)
        {
            ProfileComments = commentsResult.Data!;
        }
        else
        {
            CommentsError = commentsResult.Message;
        }
    }

    public async Task<UserProfileDto?> GetUserProfile()
    {
        var response = await userService.GetUserProfile(Id);

        if (response.Success)
        {
            return response.Data!;
        }
        else
        {
            Error = response.Message;
            return null;
        }
    }

    private async Task HandleValidSubmit()
    {
        NewCommentError = "";
        SubmitLoading = true;
        var result = await discussionService.AddProfileComment(commentModel);
        SubmitLoading = false;
        if (result.Success)
        {
            commentModel.Content = "";
            await GetComments();
        }
        else
        {
            NewCommentError = result.Message;
        }
    }
}
